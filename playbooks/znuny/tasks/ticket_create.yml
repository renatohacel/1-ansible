- name: Get session_id if not defined
  when: not session_id
  # no_log: true
  ansible.builtin.include_tasks:
    file: "{{ znuny_tasks_path }}/create_session_id.yml"

- name: Post report to ticket on Znuny
  when: session_id is defined
  delegate_to: localhost
  run_once: true # noqa: run-once[task]
  ansible.builtin.uri:
    url: "{{ znuny_apis.care.ticket.create }}\
      {{ params | ditra.cisco.dict2querystring('?') if params is defined and params }}"
    method: POST
    body_format: json
    body: "{{ body }}"
      # Ticket:
      #   Title: 'some ticket title'
      #   QueueID: 123  # QueueID or Queue is required
      #   Queue: 'some queue name'
      #   LockID: 123  # optional
      #   Lock: 'some lock name'  # optional
      #   TypeID: 123  # optional
      #   Type: 'some type name'  # optional
      #   ServiceID: 123  # optional
      #   Service: 'some service name'  # optional
      #   SLAID: 123  # optional
      #   SLA: 'some SLA name'  # optional
      #   StateID: 123  # StateID or State is required
      #   State: 'some state name'
      #   PriorityID: 123  # PriorityID or Priority is required
      #   Priority: 'some priority name'
      #   OwnerID: 123  # optional
      #   Owner: 'some user login'  # optional
      #   ResponsibleID: 123  # optional
      #   Responsible: 'some user login'  # optional
      #   CustomerUser: 'some customer user login'
      #   PendingTime:  # optional
      #     Year: 2011
      #     Month: 12
      #     Day: 03
      #     Hour: 23
      #     Minute: 05
      #     # or
      #     # Diff: 10080  # Pending time in minutes
      # Article:
      #   CommunicationChannel: 'Email'  # optional
      #   CommunicationChannelID: 1  # optional
      #   IsVisibleForCustomer: 1  # optional
      #   SenderTypeID: 123  # optional
      #   SenderType: 'some sender type name'  # optional
      #   AutoResponseType: 'some auto response type'  # optional
      #   ArticleSend: 1  # optional
      #   From: 'some from string'  # optional
      #   To: 'some to address'  # optional, required if ArticleSend => 1
      #   Cc: 'some Cc address'  # optional
      #   Bcc: 'some Bcc address'  # optional
      #   Subject: 'some subject'
      #   Body: 'some body'
      #   ContentType: 'some content type'  # ContentType or MimeType and Charset is required
      #   MimeType: 'some mime type'
      #   Charset: 'some charset'
      #   HistoryType: 'some history type'  # optional
      #   HistoryComment: 'Some history comment'  # optional
      #   TimeUnit: 123  # optional
      #   NoAgentNotify: 1  # optional
      #   ForceNotificationToUserID: [1, 2, 3]  # optional
      #   ExcludeNotificationToUserID: [1, 2, 3]  # optional
      #   ExcludeMuteNotificationToUserID: [1, 2, 3]  # optional
      #   Attachment:
      #     - Content: 'content'  # base64 encoded
      #       ContentType: 'some content type'
      #       Filename: 'some fine name'
      #     # ...
      #   # or:
      #   # Attachment:
      #   #   Content: 'content'  # base64 encoded
      #   #   ContentType: 'some content type'
      #   #   Filename: 'some fine name'
      #   # Signing and encryption, only used when ArticleSend is set to 1
      # DynamicField:  # optional
      #   - Name: 'some name'
      #     Value: $Value  # value type depends on the dynamic field
      #       # ...
      # # or
      # # DynamicField:
      # #   Name: 'some name'
      # #   Value: $Value
      # Attachment:
      #   - Content: 'content'  # base64 encoded
      #     ContentType: 'some content type'
      #     Filename: 'some fine name'
      #   # ...
      # # or
      # # Attachment:
      # #   Content: 'content'
      # #   ContentType: 'some content type'
      # #   Filename: 'some fine name'

    validate_certs: "{{ validate_certs }}"
    return_content: true
  register: response
  failed_when: "response.status != 200 or 'Error' in response.json"
